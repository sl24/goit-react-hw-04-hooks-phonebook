{"version":3,"sources":["components/ContactForm/ContactFormStyles.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListStyles.js","components/ContactList/ContactList.jsx","components/Filter/FilterStyles.js","components/Filter/Filter.jsx","components/hooks/useLocalStorage.js","components/AppStyles.js","components/App.js","index.js"],"names":["Form","styled","form","InputForm","input","Button","button","ContactForm","handleAddContact","handleCheckUnique","useState","name","setName","phone","setPhone","handleChangeForm","target","value","resetForm","onSubmit","e","preventDefault","alert","newContact","id","shortid","generate","type","placeholder","onChange","required","List","ul","ListItem","li","ContactListItem","onRemove","onClick","ContactList","contacts","length","map","FilterInput","Filter","filter","useLocalStorage","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","Container","div","MainTitle","h1","ContactTitle","h2","App","setContacts","setFilter","filterContacts","contact","toLowerCase","includes","prevContacts","verifiableName","handleName","find","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1f7b2e6.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Form = styled.form`\n  display: block;\n  margin-bottom: 10px;\n`;\n\nconst InputForm = styled.input`\n  display: block;\n  margin: 10px auto;\n  padding: 12px 20px;\n  font-size: 18px;\n  border-radius: 30px;\n\n  &::placeholder {\n    padding-left: 10px;\n    font-size: 18px;\n  }\n`;\n\nconst Button = styled.button`\n  outline: none;\n  padding: 12px 20px;\n  margin: 10px 5px;\n  border-radius: 30px;\n  background-image: linear-gradient(\n    45deg,\n    #6ab1d7 0%,\n    #33d9de 50%,\n    #002878 100%\n  );\n  background-position: 100% 0;\n  background-size: 200% 200%;\n  font-family: 'Montserrat', sans-serif;\n  font-size: 24px;\n  color: white;\n  box-shadow: 0 16px 32px 0 rgba(0, 40, 120, 0.35);\n  transition: 0.5s;\n\n  &:hover {\n    box-shadow: 0 0 0 0 rgba(0, 40, 120, 0);\n    background-position: 0 0;\n  }\n`;\n\nexport { Form, InputForm, Button };\n","import { useState } from 'react';\nimport shortid from 'shortid';\nimport { Form, InputForm, Button } from './ContactFormStyles';\nimport PropTypes from 'prop-types';\n\nexport default function ContactForm({ handleAddContact, handleCheckUnique }) {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const handleChangeForm = ({ target }) => {\n    const { name, value } = target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'phone':\n        setPhone(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n\n    const repeatName = handleCheckUnique(name);\n\n    if (repeatName) {\n      alert(`${name} is already in contacts list`);\n    } else {\n      const newContact = { id: shortid.generate(), name, phone };\n      handleAddContact(newContact);\n    }\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <Form onSubmit={handleFormSubmit}>\n      <InputForm\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter name\"\n        value={name}\n        onChange={handleChangeForm}\n        required\n      />\n      <InputForm\n        type=\"tel\"\n        name=\"phone\"\n        placeholder=\"Enter phone number\"\n        value={phone}\n        onChange={handleChangeForm}\n        required\n      />\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n}\n\nContactForm.propTypes = { handleCheckUnique: PropTypes.func.isRequired };\n","import styled from 'styled-components';\n\nconst List = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nconst ListItem = styled.li`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n  margin-bottom: 5px;\n`;\n\nconst Button = styled.button`\n  margin-left: auto;\n  outline: none;\n  padding: 2px 5px;\n  border-radius: 10px;\n  background-image: linear-gradient(\n    45deg,\n    #6ab1d7 0%,\n    #33d9de 50%,\n    #002878 100%\n  );\n  background-position: 100% 0;\n  background-size: 200% 200%;\n  font-size: 16px;\n  color: white;\n  box-shadow: 0 16px 32px 0 rgba(0, 40, 120, 0.35);\n  transition: 0.5s;\n\n  &:hover {\n    box-shadow: 0 0 0 0 rgba(0, 40, 120, 0);\n    background-position: 0 0;\n  }\n`;\n\nexport { List, ListItem, Button };\n","import PropTypes from 'prop-types';\n\nimport { List, ListItem, Button } from './ContactListStyles';\n\nconst ContactListItem = ({ name, phone, onRemove }) => {\n  return (\n    <ListItem>\n      {name}: {phone} <Button onClick={onRemove}>Delete</Button>\n    </ListItem>\n  );\n};\n\nconst ContactList = ({ contacts, onRemove }) => {\n  if (contacts.length === 0) return null;\n  return (\n    <List>\n      {contacts.map(({ id, name, phone }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          phone={phone}\n          onRemove={() => onRemove(id)}\n        />\n      ))}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string,\n    }),\n  ).isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nconst FilterInput = styled.input`\n  display: block;\n  margin: 10px auto;\n  padding: 5px;\n  font-size: 18px;\n  border-radius: 15px;\n  outline: none;\n\n  &::placeholder {\n    padding-left: 10px;\n    font-size: 16px;\n  }\n`;\n\nexport default FilterInput;\n","import PropTypes from 'prop-types';\n\nimport FilterInput from './FilterStyles';\n\nconst Filter = ({ filter, onChange }) => {\n  return (\n    <FilterInput\n      type=\"text\"\n      name=\"filter\"\n      placeholder=\"Enter name for search\"\n      value={filter}\n      onChange={onChange}\n    ></FilterInput>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, defaultValue) => {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n\nexport default useLocalStorage;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  background-color: var(--bgColorContainer);\n  width: 400px;\n  margin: 30px auto;\n  padding: 15px;\n  text-align: center;\n  border-radius: 30px;\n\n  box-shadow: var(--boxShadow);\n  transition: box-shadow 500ms var(--timingFunction);\n`;\n\nconst MainTitle = styled.h1`\n  font-size: 48px;\n  color: var(--titleColor);\n  text-align: center;\n`;\n\nconst ContactTitle = styled.h2`\n  color: var(--titleColor);\n  font-size: 24px;\n`;\n\nexport { Container, MainTitle, ContactTitle };\n","import { useState } from 'react';\n\nimport ContactForm from './ContactForm';\nimport ContactList from './ContactList';\nimport Filter from './Filter';\n\nimport useLocalStorage from '../components/hooks/useLocalStorage';\n\nimport { Container, MainTitle, ContactTitle } from './AppStyles';\n\nexport default function App() {\n  const [contacts, setContacts] = useLocalStorage('userContacts', []);\n  const [filter, setFilter] = useState('');\n\n  const handleCheckUnique = verifiableName => {\n    const handleName = verifiableName.toLowerCase();\n    return contacts.find(({ name }) => name.toLowerCase() === handleName);\n  };\n\n  const handleAddContact = newContact => {\n    setContacts(prevContacts => [...prevContacts, newContact]);\n  };\n\n  const handleFilterChange = ({ target }) => {\n    const { value } = target;\n    setFilter(value);\n  };\n\n  const handleRemoveContact = contactId => {\n    setContacts(prevContacts => [\n      ...prevContacts.filter(({ id }) => id !== contactId),\n    ]);\n  };\n\n  const getVisibleContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  const filterContacts = getVisibleContacts();\n\n  return (\n    <Container>\n      <MainTitle>Phonebook</MainTitle>\n      <ContactTitle>Form Contact</ContactTitle>\n      <ContactForm\n        handleAddContact={handleAddContact}\n        handleCheckUnique={handleCheckUnique}\n      />\n      <ContactTitle>Contacts List</ContactTitle>\n      <Filter filter={filter} onChange={handleFilterChange} />\n      <ContactList contacts={filterContacts} onRemove={handleRemoveContact} />\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}